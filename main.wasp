app MomentHappinessTracker {
  wasp: {
    version: "^0.11.1"
  },
  title: "MomentHappinessTracker",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int      @id @default(autoincrement())
    username String   @unique
    password String
    moments  Moment[]
psl=}

entity Moment {=psl
    id          Int    @id @default(autoincrement())
    description String
    rating      Int
    user        User   @relation(fields: [userId], references: [id])
    userId      Int
psl=}

action createMoment {
  fn: import { createMoment } from "@server/actions.js",
  entities: [Moment]
}

action updateMoment {
  fn: import { updateMoment } from "@server/actions.js",
  entities: [Moment]
}

query getMoments {
  fn: import { getMoments } from "@server/queries.js",
  entities: [Moment]
}

query getMoment {
  fn: import { getMoment } from "@server/queries.js",
  entities: [Moment]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { Dashboard } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route MomentRoute { path: "/moment/:momentId", to: MomentPage }
page MomentPage {
  component: import { MomentPage } from "@client/pages/Moment.jsx",
  authRequired: true
}